python切片问题
一、关于list
    list = range(10) # 0 1 2 3 4 5 6 7 8 9 
    基本形式：list[start:end:step]  步进切片，顾头不顾尾
    举例：
	print list[1:4]: 1 2 3 
	print list[:6:-1]  step为负，从右向左索引
	print list[0:5:-1]  step为负，但左边界小于右边界，结果为空列表
	print list[1::-1]   step为负，所以，右边界为0
	print list[-100:100]  -100小于左边界，100大于右边界，所以，结果为全部列表
	print list[-200:-100]  -200和-100都在左边界的左边，结果为0
	print list[10:20]  同上，结果为0
二、二维数组
	arr = np.arange(12).reshape(3,4)
	print arr
	结果为：
	[[ 0  1  2  3]
	 [ 4  5  6  7]
	 [ 8  9 10 11]]
	 数组下标都是从0开始的，直接用arr[m,n]来选取元素即可，对于切片，用arr[start1:end1,start2:end2]来切片
	 举例：
	 print arr[2,3]   选取第3行第4列的元素
	 print arr[0:2,1:3]   选取第1,2行第2,3列的元素块
	结果为：
	11
	[[1 2]
	 [5 6]]

	 广播，重新赋值等操作同理，三维的同理

三、pandas中的dataframe
	
	dataframe可以使用 iloc() 把一个df 看作多维数组进行切片
	举例：
	arr = np.arange(12).reshape(3,4)
	df = pd.DataFrame(arr)
	print df                打印整个df
	print df.iloc[2,3]      打印第3行第4列的元素
	print df.iloc[1:3,0:2]  打印第2,3行第1,2列的元素区域

	结果：
	   0  1   2   3
	0  0  1   2   3
	1  4  5   6   7
	2  8  9  10  11
	11
	   0  1
	1  4  5
	2  8  9

	dataframe也可以用loc()来选择元素，它是按照index和columns来选择的。
	举例：
	print df.iloc[1:2,0:2]
	print df.loc[1:2,0:2]
	同样是[1:2,0:2]范围，用iloc不包括右边界，但用loc就包括右边界，因为数字是行名和列名
	   0  1
	1  4  5

	   0  1   2
	1  4  5   6
	2  8  9  10
	
	为了验证loc是按照行名和列名进行切片的，再例：
	df.columns = [2,1,4,3]   更改列名
	print df
	print df.loc[1:,:1]      选取的行号在1之后的所有行，列号在1之前的所有列

	结果：
	   2  1   4   3
	0  0  1   2   3
	1  4  5   6   7
	2  8  9  10  11      原始数据

	   2  1
	1  4  5
	2  8  9

	总结：iloc是按照二维数组的思想进行切片的，其形式为df.iloc[start1:end1,start2:end2],只能是数字
	      loc是按照行名和列名进行切片的，loc还可以重排列名，形式是df.loc[start1:end1,start2:end2]，start和end只能是行名和列名
	      如果行（列）名是字符，则可以用iloc数字来切片，也可以用loc行（列）名来切片
	  ix的用法：
	  （1）如果行列都是数字，则ix和loc一样
	  （2）如果行列都是字符，则ix用数字索引，和iloc一样，用字符索引，跟loc一样

	   